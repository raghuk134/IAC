name: Deploy Frontend and Backend to AWS

on:
  push:
    branches: [ master, develop ]  # Updated to use main branch
  pull_request:
    branches: [ master ]
  workflow_dispatch:  # This allows manual triggering

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.0
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      lambda-url: ${{ steps.terraform-output.outputs.lambda-url }}
      lambda-function-name: ${{ steps.terraform-output.outputs.lambda-function-name }}
      s3-bucket-name: ${{ steps.terraform-output.outputs.s3-bucket-name }}
      cloudfront-distribution-id: ${{ steps.terraform-output.outputs.cloudfront-distribution-id }}
      environment: ${{ steps.set-env.outputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set Environment
      id: set-env
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
        fi

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        terraform_wrapper: false

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: Terraform Plan
      working-directory: ./terraform
      run: |
        terraform plan -var="environment=${{ steps.set-env.outputs.environment }}"

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve -var="environment=${{ steps.set-env.outputs.environment }}"

    - name: Get Terraform Outputs
      id: terraform-output
      working-directory: ./terraform
      run: |
        echo "lambda-url=$(terraform output -raw lambda_function_url 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
        echo "lambda-function-name=$(terraform output -raw lambda_function_name 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
        echo "s3-bucket-name=$(terraform output -raw s3_bucket_name 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
        echo "cloudfront-distribution-id=$(terraform output -raw cloudfront_distribution_id 2>/dev/null || echo '')" >> $GITHUB_OUTPUT
        
        # Debug outputs
        echo "Debug: Lambda URL = $(terraform output -raw lambda_function_url 2>/dev/null || echo 'NOT_FOUND')"
        echo "Debug: Lambda Function Name = $(terraform output -raw lambda_function_name 2>/dev/null || echo 'NOT_FOUND')"

  build-backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    needs: terraform-plan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      working-directory: ./backend
      run: |
        if [ -f pytest.ini ] || [ -f setup.cfg ] || [ -f pyproject.toml ]; then
          python -m pytest
        fi

    - name: Create deployment package
      working-directory: ./backend
      run: |
        mkdir -p dist
        pip install -r requirements.txt -t dist/
        cp -r *.py dist/
        cd dist && zip -r ../lambda-deployment.zip .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to Lambda
      working-directory: ./backend
      run: |
        echo "Debug: Function name from output = '${{ needs.terraform-plan.outputs.lambda-function-name }}'"
        if [ -z "${{ needs.terraform-plan.outputs.lambda-function-name }}" ]; then
          echo "Error: Lambda function name is empty"
          exit 1
        fi
        
        # Wait a moment for Lambda function to be ready
        sleep 10
        
        aws lambda update-function-code \
          --function-name ${{ needs.terraform-plan.outputs.lambda-function-name }} \
          --zip-file fileb://lambda-deployment.zip
        
        # Verify the update was successful
        aws lambda get-function --function-name ${{ needs.terraform-plan.outputs.lambda-function-name }}

  build-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    needs: [terraform-plan, build-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies
      run: npm ci

    - name: Update API URL
      run: |
        echo "Debug: Lambda URL from output = '${{ needs.terraform-plan.outputs.lambda-url }}'"
        if [ -f "src/fileupload.js" ]; then
          sed -i "s|process.env.REACT_APP_API_URL \|\| 'http://localhost:5000'|'${{ needs.terraform-plan.outputs.lambda-url }}'|g" src/fileupload.js
        fi
        if [ -f "frontend/src/fileupload.js" ]; then
          sed -i "s|process.env.REACT_APP_API_URL \|\| 'http://localhost:5000'|'${{ needs.terraform-plan.outputs.lambda-url }}'|g" frontend/src/fileupload.js
        fi

    - name: Build application
      env:
        REACT_APP_API_URL: ${{ needs.terraform-plan.outputs.lambda-url }}
      run: npm run build

    - name: Run tests
      run: npm test -- --coverage --passWithNoTests

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: |
        echo "Debug: S3 bucket name = '${{ needs.terraform-plan.outputs.s3-bucket-name }}'"
        if [ -z "${{ needs.terraform-plan.outputs.s3-bucket-name }}" ]; then
          echo "Error: S3 bucket name is empty"
          exit 1
        fi
        aws s3 sync dist/ s3://${{ needs.terraform-plan.outputs.s3-bucket-name }}/ --delete

    - name: Invalidate CloudFront
      run: |
        echo "Debug: CloudFront distribution ID = '${{ needs.terraform-plan.outputs.cloudfront-distribution-id }}'"
        if [ -z "${{ needs.terraform-plan.outputs.cloudfront-distribution-id }}" ]; then
          echo "Error: CloudFront distribution ID is empty"
          exit 1
        fi

  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.build-frontend.result == 'success' && needs.build-backend.result == 'success' }}
      run: |
        echo "✅ Deployment successful!"
        echo "Frontend: CloudFront distribution"
        echo "Backend: Lambda function updated"

    - name: Notify Failure
      if: ${{ needs.build-frontend.result == 'failure' || needs.build-backend.result == 'failure' }}
      run: |
        echo "❌ Deployment failed!"
        exit 1