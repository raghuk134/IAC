name: Deploy Frontend and Backend to AWS

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  AWS_REGION: us-east-1
  TERRAFORM_VERSION: 1.5.0
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    outputs:
      lambda-url: ${{ steps.terraform-output.outputs.lambda-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Validate
      working-directory: ./terraform
      run: terraform validate

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -var="environment=${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}"

    - name: Terraform Apply
      if: github.ref == 'refs/heads/master'
      working-directory: ./terraform
      run: terraform apply -auto-approve -var="environment=${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}"

    - name: Get Terraform Outputs
      id: terraform-output
      working-directory: ./terraform
      run: |
        echo "lambda-url=$(terraform output -raw lambda_function_url)" >> $GITHUB_OUTPUT

  build-backend:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest
    needs: terraform-plan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      working-directory: ./backend
      run: |
        if [ -f pytest.ini ] || [ -f setup.cfg ] || [ -f pyproject.toml ]; then
          python -m pytest
        fi

    - name: Create deployment package
      working-directory: ./backend
      run: |
        mkdir -p dist
        pip install -r requirements.txt -t dist/
        cp -r *.py dist/
        cd dist && zip -r ../lambda-deployment.zip .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to Lambda
      working-directory: ./backend
      run: |
        aws lambda update-function-code \
          --function-name resume-auto-backend-${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }} \
          --zip-file fileb://lambda-deployment.zip

  build-frontend:
    name: Build and Deploy Frontend
    runs-on: ubuntu-latest
    needs: [terraform-plan, build-backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Update API URL
      working-directory: ./frontend/src
      run: |
        sed -i "s|process.env.REACT_APP_API_URL \|\| 'http://localhost:5000'|'${{ needs.terraform-plan.outputs.lambda-url }}'|g" fileupload.js

    - name: Build application
      working-directory: ./frontend
      env:
        REACT_APP_API_URL: ${{ needs.terraform-plan.outputs.lambda-url }}
      run: npm run build

    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --passWithNoTests

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      working-directory: ./frontend
      run: |
        aws s3 sync build/ s3://resume-auto-frontend-${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }} --delete

    - name: Invalidate CloudFront
      run: |
        DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Comment=='resume-auto-${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}'].Id" --output text)
        aws cloudfront create-invalidation --distribution-id $DISTRIBUTION_ID --paths "/*"

  post-deployment:
    name: Post Deployment Tasks
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: always()
    
    steps:
    - name: Notify Success
      if: ${{ needs.build-frontend.result == 'success' && needs.build-backend.result == 'success' }}
      run: |
        echo "✅ Deployment successful!"
        echo "Frontend: CloudFront distribution"
        echo "Backend: Lambda function updated"

    - name: Notify Failure
      if: ${{ needs.build-frontend.result == 'failure' || needs.build-backend.result == 'failure' }}
      run: |
        echo "❌ Deployment failed!"
        exit 1